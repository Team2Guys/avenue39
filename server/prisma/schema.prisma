generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  password         String
  phone            String?
  resetToken       String?
  resetTokenExpiry DateTime?
}

model Products {
  id Int @id @default(autoincrement())

  name          String @unique
  price         Int
  description   String
  stock         Int
  discountPrice Int?

  color String[] @default([])

  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  sale         String?  @default("0")
  saleDuration DateTime @default(now())

  posterImageUrl      String
  posterImagePublicId String

  hoverImageUrl      String
  hoverImagePublicId String

  productImages         Json[]
  additionalInformation Json[]

  reviews Reviews[]

  categories    Categories[]            @relation("ProductCategories")
  subcategories SubCategories[]         @relation("ProductSubCategories")
  salesRecords  sales_record_products[]
}

model Categories {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  posterImageUrl      String?
  posterImagePublicId String?

  products      Products[]      @relation("ProductCategories")
  subcategories SubCategories[] @relation("CategorySubCategories")
}

model SubCategories {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  posterImageUrl      String?
  posterImagePublicId String?

  products   Products[]   @relation("ProductSubCategories")
  categories Categories[] @relation("CategorySubCategories")
}

model Reviews {
  id        Int      @unique @default(autoincrement())
  name      String
  email     String
  review    String
  star      Int
  createdAt DateTime @default(now())

  Products  Products? @relation(fields: [productId], references: [id])
  productId Int?
}

model Admins {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String

  canAddProduct          Boolean @default(false)
  canEditProduct         Boolean @default(false)
  canDeleteProduct       Boolean @default(false)
  canAddCategory         Boolean @default(false)
  canDeleteCategory      Boolean @default(false)
  canEditCategory        Boolean @default(false)
  canCheckProfit         Boolean @default(false)
  canCheckRevenue        Boolean @default(false)
  canCheckVisitors       Boolean @default(false)
  canViewUsers           Boolean @default(false)
  canViewSales           Boolean @default(false)
  canViewAdmins          Boolean @default(false)
  canViewTotalProducts   Boolean @default(false)
  canViewTotalCategories Boolean @default(false)

  posterImageUrl      String?
  posterImagePublicId String?

  role String @default("Admin")
}

model sales_record {
  id         Int                     @id @default(autoincrement())
  user_email String                  @unique
  createdAt  DateTime                @default(now())
  products   sales_record_products[]
}

model sales_record_products {
  id            Int          @id @default(autoincrement())
  quantity      Int
  productData   Json
  salesRecord   sales_record @relation(fields: [salesRecordId], references: [id])
  salesRecordId Int
  Products      Products[]
}
